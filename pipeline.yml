---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.13
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:

# products

- name: tf
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: elastic-runtime
    product_version: 2.6.2
    sort_by: semver

- name: platform-automation-tasks
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: platform-automation
    product_version: 3\.(.*)
    sort_by: semver


- name: platform-automation-image
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: platform-automation
    product_version: 3\.(.*)
    sort_by: semver

- name: opsman
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: ops-manager
    product_version: 2.6.5
    sort_by: semver

- name: pks
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: pivotal-container-service
    product_version: 1.4.1
    sort_by: semver

- name: pks-stemcell
  type: pivnet
  source:
    api_token: ((pivnet-api-token))
    product_slug: stemcells-ubuntu-xenial
    product_version: '250.25'
    sort_by: semver

# - name: harbor
#   type: pivnet
#   source:
#     api_token: ((pivnet-api-token))
#     product_slug: harbor-container-registry
#     product_version: 1.7.5
#     sort_by: semver

# - name: harbor-stemcell
#   type: pivnet
#   source:
#     api_token: ((pivnet-api-token))
#     product_slug: stemcells-ubuntu-xenial
#     product_version: 250.29
#     sort_by: semver

- name: env-state-gcp
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: ((gcp.buckets.terraform))
      prefix: ((pks.env_name))
      credentials: ((gcp.gcp_service_account))
    vars:
      project: ((gcp.project))
      region: ((gcp.region))
      zones: ((gcp.zones))
      service_account_key: ((gcp.gcp_service_account))
      buckets_location: ((gcp.buckets_location))
      dns_suffix: ((gcp.parent_zone.dns_suffix))
      opsman_vm: true
      opsman_image_url: "ops-manager-us/pcf-gcp-2.6.11-build.210.tar.gz"
      parent_managed_zone: ((gcp.parent_zone.name))
      email: ((email))

- name: cluster-state-gcp
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: ((gcp.buckets.terraform))
      prefix: ((pks.env_name))-cluster
      credentials: ((gcp.gcp_service_account))
    vars:
      project: ((gcp.project))
      region: ((gcp.region))
      zones: ((gcp.zones))
      service_account_key: ((gcp.gcp_service_account))
      buckets_location: ((gcp.buckets_location))
      cluster_name: ((pks.cluster_name))
      dns_zone_dns_name: ((pks.env_name)).((gcp.parent_zone.dns_suffix))




# configurations
- name: pcf-automation-source
  type: git
  source:
    uri: ((github.repos.pcf-automation-source.uri))
    branch: v1.0.1

- name: configuration
  type: git
  source:
    private_key: ((github.repos.configuration.private_key))
    uri: ((github.repos.configuration.uri))
    branch: master
    paths: 
    - ((pks.env_name))/*

- name: state
  type: git
  source:
    private_key: ((github.repos.state.private_key))
    uri: ((github.repos.state.uri))
    branch: master
    paths: 
    - ((pks.env_name))/*

- name: configuration-repo
  type: git
  source:
    private_key: ((github.repos.configuration.private_key))
    uri: ((github.repos.configuration.uri))
    branch: master

- name: state-repo
  type: git
  source:
    private_key: ((github.repos.state.private_key))
    uri: ((github.repos.state.uri))
    branch: master

# triggers used to have jobs do something in a timely manner

- name: one-time-trigger
  type: time
  source:
    interval: 999999h


interpolate: &interpolate
    task: interpolate-config
    file: pcf-automation-source/tasks/interpolate.yml
    input_mapping:
      config: configuration
      terraform-output: env-state-gcp
    output_mapping:
      interpolated-config: configuration-interpolated
    params:
      ENV_NAME: ((pks.env_name))
      PIVNET_API_TOKEN: ((pivnet-api-token))
      GCP_AUTH_JSON: ((gcp.gcp_service_account))
      OM_USERNAME: ((opsman.username))
      OM_PASSWORD: ((opsman.password))
      OM_DECRYPTION_PASSPHRASE: ((opsman.decryption-passphrase))


rename-tf-source: &rename-tf-source
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: bash
    inputs:
      - name: tf
    outputs:
      - name: tf-source
    run:
      path: bash
      args:
      - "-c"
      - |
        mv tf/pivotal-cf-terraforming*/* tf-source

jobs:

- name: bootstrap-configuration
  serial: true
  public: false
  plan:
  - aggregate:
    - get: one-time-trigger
      trigger: true
    - get: pcf-automation-source
    - get: configuration-repo
    - get: state-repo
  - task: add-new-templates
    input_mapping:
      config: configuration-repo
      state: state-repo
      pcf-automation: pcf-automation-source
    params:
      ENV_NAME: ((pks.env_name))
      GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@pivotal.io"
      GIT_AUTHOR_NAME: "PCF Automation Bot"
      COMMIT_MESSAGE: 'Update template files'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine/git
      inputs:
        - name: config
        - name: state
        - name: pcf-automation
      outputs:
        - name: config-commit
        - name: state-commit
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              git config --global user.email "$GIT_AUTHOR_EMAIL"
              git config --global user.name "$GIT_AUTHOR_NAME"
              git clone config config-commit
              mkdir -p config-commit/$ENV_NAME
              cp -a pcf-automation/templates/* config-commit/$ENV_NAME
              cp -a pcf-automation/terraform_override_files config-commit/$ENV_NAME
              cd config-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
              cd ..
              git clone state state-commit
              mkdir -p state-commit/$ENV_NAME/state
              touch state-commit/$ENV_NAME/state/state.yml
              cd state-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "Created empty state file"
  - put: configuration
    params:
      repository: config-commit
      merge: true
  - put: state
    params:
      repository: state-commit
      merge: true


- name: terraforming-gcp
  serial: true
  public: false
  plan:
  - get: configuration
    trigger: true
  - get: tf
    params:
      globs:
      - "terraforming-gcp-*.zip"
      unpack: true
  - get: pcf-automation-source
    passed: [bootstrap-configuration]
  - task: rename-folder
    <<: *rename-tf-source
  - put: env-state-gcp
    params:
      # env:
      #   TF_LOG: DEBUG
      env_name: ((pks.env_name))
      terraform_source: tf-source/terraforming-pks
      override_files:
        - configuration/((pks.env_name))/terraform_override_files/dns_override.tf
        - configuration/((pks.env_name))/terraform_override_files/acme_override.tf
        - configuration/((pks.env_name))/terraform_override_files/output_override.tf
      delete_on_failure: false

# INSTALL JOBS
- name: install-opsman
  serial: true
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true, globs: [platform-automation-image-*.tgz]}
    - get: platform-automation-tasks
      params: {unpack: true,globs: [platform-automation-tasks-*.zip]}
    - get: one-time-trigger
      trigger: true
    - get: opsman
      params:
        globs: 
        - '*gcp*.yml'
    - get: configuration
      passed: [terraforming-gcp]
    - get: state
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman
      state: state
      config: configuration-interpolated
    params:
      VARS_FILES: config/((pks.env_name))/config/opsman-vars.yml
      STATE_FILE: ((pks.env_name))/state/state.yml
      OPSMAN_CONFIG_FILE: ((pks.env_name))/config/opsman.yml
    ensure: &make-state-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: state
            file-source: generated-state
          output_mapping:
            repository-commit: state-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((pks.env_name))/state/state.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@pivotal.io"
            GIT_AUTHOR_NAME: "PCF Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: state
          params:
            repository: state-commit
            merge: true
  - task: skip_ssl_validation
    image: platform-automation-image
    input_mapping:
      env: configuration-interpolated
    output_mapping:
      env-modified: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
    config:
      platform: linux
      inputs:
        - name: env
      outputs:
        - name: env-modified
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              cp -a env/* env-modified
              printf '\n%s' "skip-ssl-validation: true" >> env-modified/$ENV_FILE
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 20
    input_mapping:
      env: configuration-interpolated
      config: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
      AUTH_CONFIG_FILE: ((pks.env_name))/config/auth.yml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration-interpolated
      env: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((pks.env_name))/config/director.yml
      VARS_FILES: config/((pks.env_name))/config/director-vars.yml
  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
  - task: update-ssl-certificate
    image: platform-automation-image
    file: pcf-automation-source/tasks/update-ssl-certificate.yml
    input_mapping:
      terraform-output: env-state-gcp
      env: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml

- name: upload-stemcell
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true, globs: [platform-automation-image-*.tgz]}
    - get: platform-automation-tasks
      params: {unpack: true,globs: [platform-automation-tasks-*.zip]}
    - get: pks-stemcell
      params:
        globs:
        - light-bosh-stemcell-*-google-*.tgz
    - get: configuration
      trigger: true
      passed: [ install-opsman ]
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: upload-pks-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration-interpolated
      stemcell: pks-stemcell
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml

- name: upload-and-stage-pks
  serial: true
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true, globs: [platform-automation-image-*.tgz]}
    - get: platform-automation-tasks
      params: {unpack: true,globs: [platform-automation-tasks-*.zip]}
    - get: pks
      params:
        globs:
        - pivotal-container-service-*.pivotal
    - get: configuration
      trigger: true
      passed: [ upload-stemcell ]
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: upload-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pks
      env: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
  - task: stage-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pks
      env: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml

- name: configure-pks
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true, globs: [platform-automation-image-*.tgz]}
    - get: platform-automation-tasks
      params: {unpack: true,globs: [platform-automation-tasks-*.zip]}
    - get: configuration
      trigger: true
      passed: [ upload-and-stage-pks ]
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: configure-pks
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration-interpolated
      env: configuration-interpolated
    params:
      CONFIG_FILE: ((pks.env_name))/config/pks.yml
      ENV_FILE: ((pks.env_name))/env/env.yml

- name: apply-product-changes
  serial: true
  serial_groups: 
  - upgrade 
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true, globs: [platform-automation-image-*.tgz]}
    - get: platform-automation-tasks
      params: {unpack: true,globs: [platform-automation-tasks-*.zip]}
    - get: configuration
      trigger: true
      passed: [ configure-pks ]
    - get: pcf-automation-source
    - get: env-state-gcp
  - <<: *interpolate
  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml

# DESTROY

- name: destroy-installation
  serial: true
  public: false
  plan:
  - aggregate:
    - get: pcf-automation-source
      trigger: false
    - get: platform-automation-image
      params: {unpack: true, globs: [platform-automation-image-*.tgz]}
    - get: platform-automation-tasks
      params: {unpack: true,globs: [platform-automation-tasks-*.zip]}
    - get: configuration
    - get: state
    - get: env-state-gcp
  - <<: *interpolate
  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
  - task: delete-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: state
      config: configuration-interpolated
    params:
      VARS_FILES: config/((pks.env_name))/config/opsman-vars.yml
      STATE_FILE: ((pks.env_name))/state/state.yml
      OPSMAN_CONFIG_FILE: ((pks.env_name))/config/opsman.yml

- name: destroy-terraform
  serial: true
  public: false
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      passed:
      - destroy-tf-k8s
    - get: tf
      params:
        globs:
        - "terraforming-gcp-*.zip"
        unpack: true
  - get: pcf-automation-source
  - get: state
  - task: rename-folder
    <<: *rename-tf-source
  - put: env-state-gcp
    params:
      env_name: ((pks.env_name))
      terraform_source: tf-source/terraforming-pks
      override_files:
        - configuration/((pks.env_name))/terraform_override_files/dns_override.tf
        - configuration/((pks.env_name))/terraform_override_files/acme_override.tf
        - configuration/((pks.env_name))/terraform_override_files/output_override.tf
      delete_on_failure: false
      action: destroy
    get_params:
      action: destroy
  - task: delete-config
    input_mapping:
      config: configuration
      state: state
    params:
      ENV_NAME: ((pks.env_name))
      GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@pivotal.io"
      GIT_AUTHOR_NAME: "PCF Automation Bot"
      COMMIT_MESSAGE: 'Delete Environment'
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine/git
      inputs:
        - name: config
        - name: state
      outputs:
        - name: config-commit
        - name: state-commit
      run:
        path: /bin/sh
        args:
          - -c
          - |
              set -eux
              git config --global user.email "$GIT_AUTHOR_EMAIL"
              git config --global user.name "$GIT_AUTHOR_NAME"
              git clone config config-commit
              rm -rf config-commit/$ENV_NAME
              cd config-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
              cd ..
              git clone state state-commit
              rm -rf state-commit/$ENV_NAME
              cd state-commit
              git add -A
              git diff-index --quiet HEAD || git commit -m "$COMMIT_MESSAGE"
  - put: configuration
    params:
      repository: config-commit
      merge: true
  - put: state
    params:
      repository: state-commit
      merge: true

- name: create-cluster
  public: false
  plan:
  - aggregate:
    - get: platform-automation-image
      params: {unpack: true, globs: [platform-automation-image-*.tgz]}
    - get: configuration
    - get: pcf-automation-source
    - get: env-state-gcp
    - get: pks
      params:
        globs:
        - pks-linux*
  - <<: *interpolate
  - task: create-cluster
    image: platform-automation-image
    file: pcf-automation-source/tasks/create-cluster.yml
    input_mapping:
      terraform-output: env-state-gcp
      env: configuration-interpolated
      pks: pks
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
      CLUSTER_NAME: ((pks.cluster_name))
      CLUSTER_HOSTNAME: ((pks.cluster_name)).((pks.env_name)).((gcp.parent_zone.dns_suffix))

- name: terraforming-k8s
  serial: true
  public: false
  plan:
  - get: platform-automation-image
    params: {unpack: true, globs: [platform-automation-image-*.tgz]}
  - get: configuration
    trigger: true
    passed: ['create-cluster']
  - get: env-state-gcp
  - get: pcf-automation-source
  - get: pks
    params:
      globs:
      - pks-linux*
  - <<: *interpolate
  - task: get-master-instances
    image: platform-automation-image
    file: pcf-automation-source/tasks/master-instances.yml
    input_mapping:
      terraform-output: env-state-gcp
      env: configuration-interpolated
      pks: pks
    output_mapping:
      tf-modified: configuration-interpolated
    params:
      ENV_FILE: ((pks.env_name))/env/env.yml
      TF_FILE: ((pks.env_name))/tf/terraform.tfvars
      CLUSTER_NAME: ((pks.cluster_name))
      GCP_ACCOUNT: ((gcp.gcp_service_account))
  - put: cluster-state-gcp
    params:
      env_name: ((pks.env_name))
      terraform_source: pcf-automation-source/terraforming-k8s
      delete_on_failure: false
      var_files: ["configuration-interpolated/((pks.env_name))/tf/terraform.tfvars"]

- name: destroy-tf-k8s
  serial: true
  public: false
  plan:
  - get: platform-automation-image
    params: {unpack: true, globs: [platform-automation-image-*.tgz]}
  - get: configuration
    trigger: true
    passed:
    - destroy-installation
  - get: env-state-gcp
  - get: pcf-automation-source
    params:
      globs:
      - pks-linux*
  - <<: *interpolate
  - put: cluster-state-gcp
    params:
      env_name: ((pks.env_name))
      terraform_source: pcf-automation-source/terraforming-k8s
      delete_on_failure: false
      var_files: ["configuration-interpolated/((pks.env_name))/tf/terraform.tfvars"]
      action: destroy
    get_params:
      action: destroy


groups:
- name: deploy
  jobs:
  - terraforming-gcp
  - bootstrap-configuration
  - install-opsman
  - upload-stemcell
  - configure-pks
  - upload-and-stage-pks
  - apply-product-changes
- name: create-cluster
  jobs:
  - terraforming-k8s
  - create-cluster
- name: destroy
  jobs:
  - destroy-terraform
  - destroy-tf-k8s
  - destroy-installation
